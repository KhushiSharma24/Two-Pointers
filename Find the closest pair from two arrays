/*  Given two sorted arrays arr and brr and a number x, find the pair whose sum is closest to x and the pair has an element from each array. In the case of multiple closest pairs return any one of them.
Note: Can return the two numbers in any manner. The driver code takes care of the printing of the closest difference.
arr[i]+brr[j] can be greater or less than x

Example 1:
Input : N = 4, M = 4
arr[ ] = {1, 4, 5, 7}
brr[ ] = {10, 20, 30, 40} 
X = 32
Output : 
1, 30
Explanation:
The closest pair whose sum is closest
to 32 is {1, 30} = 31.                     */


class Solution{
    // Function for finding maximum and value pair
    public static ArrayList<Integer> printClosest (int arr[], int brr[], int n, int m, int x) {
        ArrayList<Integer> ans=new ArrayList<>();
        int i=0;
        int j=m-1;
        int sum=0;
        int a=-1;
        int b=-1;
        int min=Integer.MAX_VALUE;
        while(i<n && j>=0){
            sum=arr[i]+brr[j];
            if(Math.abs(sum-x)<min){
                min=Math.abs(sum-x);
                a=i;
                b=j;
            }
            else if(sum<x){
                i++;
            }
            else if(sum>x){
                j--;
            }
            else{
                a=i;
                b=j;
                break;
            }
        }
        ans.add(arr[a]);
        ans.add(brr[b]);
        return ans;
    }
}
